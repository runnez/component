@mixin bp($resolution) {
  @media only screen and (min-width: $resolution + px) {
    @content;
  }
}

@mixin ip($resolution1, $resolution2) {
  @media only screen and (min-width: $resolution1 + px) and (max-width: $resolution2 - 1 + px) {
    @content;
  }
}

@mixin lp($resolution) {
  @media only screen and (max-width: $resolution - 1 + px) {
    @content;
  }
}

@mixin triangle($direction, $color, $width, $height: "") {
  border: $width solid transparent;

  @if $height != "" {
    border-width: $width $height;
  }

  @if $direction != "" {
    @if $direction == "t" {
      border-top-color: $color;
    }
    @if $direction == "r" {
      border-right-color: $color;
    }
    @if $direction == "b" {
      border-bottom-color: $color;
    }
    @if $direction == "l" {
      border-left-color: $color;
    }
  }
}

@mixin simple-arrow($size, $color, $direction: 'left') {
  display: block;
  width: $size;
  height: $size;
  border: 1px solid $color;
  border-width: 1px 1px 0 0;
  @if $direction == 'left' {
    transform: rotate(-135deg);
  }
  @if $direction == 'right' {
    transform: rotate(45deg);
  }
}

@mixin triangle-color($direction, $color) {
  border-color: transparent;

  @if $direction != "" {
    @if $direction == "t" {
      border-top-color: $color;
    }
    @if $direction == "r" {
      border-right-color: $color;
    }
    @if $direction == "b" {
      border-bottom-color: $color;
    }
    @if $direction == "l" {
      border-left-color: $color;
    }
  }
}

@mixin triangle-t($color, $width, $scale-x: "1", $scale-y: "1") {
  width: $width;
  height: $width;
  background: $color;
  transform: rotate(45deg) scale($scale-x, $scale-y);
}

@mixin arrow() {
  position: relative;
  display: inline-block;
  height: 6px;
  vertical-align: middle;

  &:before {
    @include triangle(t, #000, 6px);
    display: block;
    content: '';
  }

  &:after {
    @include triangle(t, $filter-bg, 6px);
    @include p(a,-3px);
    display: block;
    content: '';
  }

  &:hover:before {
    @include triangle(t, rgb(146, 28, 0), 6px);
  }
}

// http://compass-style.org/reference/compass/helpers/sprites/
@mixin get-sprite($map, $sprite, $repeat: no-repeat, $height: true, $width: true) {
  //http://compass-style.org/reference/compass/helpers/sprites/#sprite-file
  $sprite-image: sprite-file($map, $sprite);

  // http://compass-style.org/reference/compass/helpers/sprites/#sprite-url
  $sprite-map: sprite-url($map);

  // http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
  $sprite-position: sprite-position($map, $sprite);

  // Returns background
  background: $sprite-map $sprite-position $repeat;

  // http://compass-style.org/reference/compass/helpers/image-dimensions/
  // Checks to see if the user wants height returned
  @if $height == true {
    // Gets the height of the sprite-image
    $sprite-height: image-height($sprite-image);
    // Returns the height
    height: $sprite-height;
  }


  // http://compass-style.org/reference/compass/helpers/image-dimensions/
  // Checks to see if the user wants height returned
  @if $width == true {
     // Gets the height of the sprite-image
    $sprite-width: image-width($sprite-image);
    // Returns the width
    width: $sprite-width;
  }
}

@mixin icon($name, $arg1: "ib", $arg2: '') {
  @if $arg1 == "b" {
    display: block;
  }

  @if $arg1 != "b" {
    display: inline-block;
  }

  @include get-sprite($icon-sprites, $name);

  @if $arg2 == 'retina' {
    @media (min--moz-device-pixel-ratio: 1.5), (-webkit-min-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
      background: sprite-url($icon2x-sprites);
      background-size: (image-width(sprite-path($icon2x-sprites)) / 2) (image-height(sprite-path($icon2x-sprites)) / 2);
      background-position: round(nth(sprite-position($icon2x-sprites, $name), 1) / 2) round(nth(sprite-position($icon2x-sprites, $name), 2) / 2);
      height: round(image-height(sprite-file($icon2x-sprites, $name)) / 2);
      width: round(image-width(sprite-file($icon2x-sprites, $name)) / 2 );
    }
  }

  content: "";
}

@mixin single-icon($image) {
  display: inline-block;

  width: image-width($image);
  height: image-height($image);

  background-image: inline-image($image);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100% auto;

  content: "";
}

@mixin fade-out-gradient($from_color, $to_color, $width, $height, $direction: left) {
  position: relative;

  &:after {
    position: absolute;
    display: block;
    @if $direction == 'left' {
      right: 0;
      bottom: 0;
    }
    width: $width;
    height: $height;
    background: linear-gradient($direction, $from_color 0%, $to_color 50%, $to_color 100%);
    content: "";
  }
}

@mixin tile-grid($selector, $elememnts_in_col, $gutter, $offset) {
  #{ $selector } {
    margin-right: $gutter;
    margin-top: $offset;

    &:nth-child(#{$elememnts_in_col}n) {
      margin-right: 0;
    }
  }

  @for $i from 1 through $elememnts_in_col {
    #{ $selector } {
      &:nth-child(#{$i}) {
        margin-top: 0;
      }
    }
  }
}

@mixin hoverableFade($parent) {
  transition: opacity .15s ease-in-out;
  opacity: 0;

  #{ $parent }:hover & {
    opacity: 1;
  }
}

@mixin single-hover {
  &:not(:hover) > .is-active > a,
  > li:hover > a {
    @content;
  }
}

@mixin reset-element {
  display: block;
  width: 100%;
  background: none;
  border: none;
  outline: none;
  padding: 0;
  text-align: inherit;
  min-height: none;
  min-width: none;
}

@mixin lateral-line($offset, $offsetTop: 0) {
  overflow: hidden;
  position: relative;
  white-space: nowrap;
  text-align: center;

  &:before,
  &:after {
    content: "";
    position: relative;
    display: inline-block;

    @if $offsetTop != 0 {
      top: $offsetTop;
    }

    width: 50%;
    height: 1px;
    background-color: #ccc;
    vertical-align: middle;
  }

  &:before {
    left: -$offset;
    margin: 0 0 0 -50%;
  }

  &:after {
    left: $offset;
    margin: 0 -50% 0 0;
  }
}

@mixin lateral-line-color($color) {
  &:after, &:before {
    background-color: $color;
  }
}
